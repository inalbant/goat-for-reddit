// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String    @id @default(cuid())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  Int
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            Int         @id @default(autoincrement())
  name          String
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  posts         Post[]
  comments      Comment[]
  votes         Vote[]
  joinedSubs    Subreddit[]
  Account       Account[]
  Session       Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Subreddit {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  posts       Post[]
  joinedUsers User[]
  displayName String
  infoBoxText String
  createdAt   DateTime @default(now())
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  body        String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId Int
  comments    Comment[]
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  votes       Vote[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id       Int    @id @default(autoincrement())
  body     String
  author   User   @relation(fields: [authorId], references: [id])
  authorId Int
  votes    Vote[]
  post     Post   @relation(fields: [postId], references: [id])
  postId   Int
}

model Vote {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
  voteType  VoteType
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
